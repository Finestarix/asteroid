generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  fullname      String?
  username      String           @unique
  password      String
  role          Role             @default(User)
  avatar        Avatar?
  debtLending   DebtHeader[]
  debtBorrowing DebtDetail[]
  foodCreator   CateringFood[]   @relation(name: "createdUser")
  foodUpdater   CateringFood[]   @relation(name: "updatedUser")
  foodBuyer     CateringDetail[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Avatar {
  user            User            @relation(fields: [userId], references: [id])
  userId          Int             @id
  topType         TopType
  accessoriesType AccessoriesType
  hairColor       HairColor
  facialHairType  FacialHairType
  facialHairColor FacialHairColor
  clotheType      ClotheType
  clotheColor     ClotheColor
  eyeType         EyeType
  eyebrowType     EyebrowType
  mouthType       MouthType
  skinColor       SkinColor
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model CateringHeader {
  id            Int              @id @default(autoincrement())
  date          DateTime
  basePrice     Int
  deliveryPrice Int
  details       CateringDetail[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model CateringDetail {
  id                 Int                         @id @default(autoincrement())
  header             CateringHeader              @relation(fields: [headerId], references: [id])
  headerId           Int
  participant        User                        @relation(fields: [participantId], references: [id])
  participantId      Int
  paymentType        PaymentType
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  participantDetails CateringParticipantDetail[]
}

model CateringParticipantDetail {
  id        Int            @id @default(autoincrement())
  detail    CateringDetail @relation(fields: [detailId], references: [id])
  detailId  Int
  food      CateringFood   @relation(fields: [foodId], references: [id])
  foodId    Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model CateringFood {
  id              Int                         @id @default(autoincrement())
  name            String
  category        CateringType
  price           Int
  active          Boolean
  createdBy       User                        @relation(name: "createdUser", fields: [createdById], references: [id])
  createdById     Int
  lastUpdatedBy   User?                       @relation(name: "updatedUser", fields: [lastUpdatedById], references: [id])
  lastUpdatedById Int?
  buyer           CateringParticipantDetail[]
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
}

model DebtHeader {
  id          Int          @id @default(autoincrement())
  lender      User         @relation(fields: [lenderId], references: [id])
  lenderId    Int
  title       String
  lendingTime DateTime
  details     DebtDetail[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model DebtDetail {
  id         Int        @id @default(autoincrement())
  header     DebtHeader @relation(fields: [headerId], references: [id])
  headerId   Int
  borrower   User       @relation(fields: [borrowerId], references: [id])
  borrowerId Int
  amount     Int
  payTime    DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum Role {
  User
  Admin
  Owner
}

enum PaymentType {
  NotPaid
  Cash
  Transfer
  Other
}

enum CateringType {
  MainDish
  SideDish
  Vegetable
  Additional
}

enum TopType {
  NoHair
  Eyepatch
  Hat
  Hijab
  Turban
  WinterHat1
  WinterHat2
  WinterHat3
  WinterHat4
  LongHairBigHair
  LongHairBob
  LongHairBun
  LongHairCurly
  LongHairCurvy
  LongHairDreads
  LongHairFrida
  LongHairFro
  LongHairFroBand
  LongHairNotTooLong
  LongHairShavedSides
  LongHairMiaWallace
  LongHairStraight
  LongHairStraight2
  LongHairStraightStrand
  ShortHairDreads01
  ShortHairDreads02
  ShortHairFrizzle
  ShortHairShaggyMullet
  ShortHairShortCurly
  ShortHairShortFlat
  ShortHairShortRound
  ShortHairShortWaved
  ShortHairSides
  ShortHairTheCaesar
  ShortHairTheCaesarSidePart
}

enum AccessoriesType {
  Blank
  Kurt
  Prescription01
  Prescription02
  Round
  Sunglasses
  Wayfarers
}

enum HairColor {
  Auburn
  Black
  Blonde
  BlondeGolden
  Brown
  BrownDark
  PastelPink
  Blue
  Platinum
  Red
  SilverGray
}

enum FacialHairType {
  Blank
  BeardMedium
  BeardLight
  BeardMajestic
  MoustacheFancy
  MoustacheMagnum
}

enum FacialHairColor {
  Auburn
  Black
  Blonde
  BlondeGolden
  Brown
  BrownDark
  Platinum
  Red
}

enum ClotheType {
  BlazerShirt
  BlazerSweater
  CollarSweater
  GraphicShirt
  Hoodie
  Overall
  ShirtCrewNeck
  ShirtScoopNeck
  ShirtVNeck
}

enum ClotheColor {
  Black
  Blue01
  Blue02
  Blue03
  Gray01
  Gray02
  Heather
  PastelBlue
  PastelGreen
  PastelOrange
  PastelRed
  PastelYellow
  Pink
  Red
  White
}

enum EyeType {
  Close
  Cry
  Default
  Dizzy
  EyeRoll
  Happy
  Hearts
  Side
  Squint
  Surprised
  Wink
  WinkWacky
}

enum EyebrowType {
  Angry
  AngryNatural
  Default
  DefaultNatural
  FlatNatural
  RaisedExcited
  RaisedExcitedNatural
  SadConcerned
  SadConcernedNatural
  UnibrowNatural
  UpDown
  UpDownNatural
}

enum MouthType {
  Concerned
  Default
  Disbelief
  Eating
  Grimace
  Sad
  ScreamOpen
  Serious
  Smile
  Tongue
  Twinkle
  Vomit
}

enum SkinColor {
  Tanned
  Yellow
  Pale
  Light
  Brown
  DarkBrown
  Black
}
