generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  fullname      String?
  username      String           @unique
  password      String
  role          Role             @default(User)
  debtLending   DebtHeader[]
  debtBorrowing DebtDetail[]
  headerCreator CateringHeader[] @relation(name: "createdUserCateringHeader")
  headerUpdater CateringHeader[] @relation(name: "updatedUserCateringHeader")
  foodCreator   CateringFood[]   @relation(name: "createdUserCateringFood")
  foodUpdater   CateringFood[]   @relation(name: "updatedUserCateringFood")
  foodBuyer     CateringDetail[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deleted       Boolean          @default(false)
}

model CateringHeader {
  id                Int              @id @default(autoincrement())
  date              DateTime
  basePrice         Int
  deliveryPrice     Int?
  realDeliveryPrice Int?
  active            Boolean
  createdBy         User             @relation(name: "createdUserCateringHeader", fields: [createdById], references: [id])
  createdById       Int
  lastUpdatedBy     User             @relation(name: "updatedUserCateringHeader", fields: [lastUpdatedById], references: [id])
  lastUpdatedById   Int
  details           CateringDetail[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deleted           Boolean          @default(false)
}

model CateringDetail {
  id             Int                         @id @default(autoincrement())
  header         CateringHeader              @relation(fields: [headerId], references: [id])
  headerId       Int
  participant    User                        @relation(fields: [participantId], references: [id])
  participantId  Int
  paymentType    PaymentType
  note           String?
  onlyAdditional Boolean
  payTime        DateTime?
  approveTime    DateTime?
  foods          CateringParticipantDetail[]
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime                    @updatedAt
  deleted        Boolean                     @default(false)
}

model CateringParticipantDetail {
  id        Int            @id @default(autoincrement())
  detail    CateringDetail @relation(fields: [detailId], references: [id])
  detailId  Int
  food      CateringFood   @relation(fields: [foodId], references: [id])
  foodId    Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deleted   Boolean        @default(false)
}

model CateringFood {
  id              Int                         @id @default(autoincrement())
  name            String
  category        CateringType
  additionalPrice Int
  reductionPrice  Int
  active          Boolean
  createdBy       User                        @relation(name: "createdUserCateringFood", fields: [createdById], references: [id])
  createdById     Int
  lastUpdatedBy   User                        @relation(name: "updatedUserCateringFood", fields: [lastUpdatedById], references: [id])
  lastUpdatedById Int
  participant     CateringParticipantDetail[]
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  deleted         Boolean                     @default(false)
}

model DebtHeader {
  id          Int          @id @default(autoincrement())
  lender      User         @relation(fields: [lenderId], references: [id])
  lenderId    Int
  title       String
  lendingTime DateTime
  details     DebtDetail[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deleted     Boolean      @default(false)
}

model DebtDetail {
  id         Int        @id @default(autoincrement())
  header     DebtHeader @relation(fields: [headerId], references: [id])
  headerId   Int
  borrower   User       @relation(fields: [borrowerId], references: [id])
  borrowerId Int
  amount     Int
  payTime    DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deleted    Boolean    @default(false)
}

enum Role {
  User
  CateringAdmin
  DebtAdmin
  Owner
}

enum PaymentType {
  NotPaid
  Pending
  Paid
}

enum CateringType {
  Rice
  MainDish
  SideDish
  Vegetable
  Additional
  OnlyAdditional
}
